version: '3.8'

services:
  pydantic-ai-postgres:
    image: ankane/pgvector:v0.5.1
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-chatdb}
    volumes:
      - pydantic-ai-postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pydantic-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pydantic-ai-minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - pydantic-ai-minio-data:/data
      - ./docker/minio/config:/root/.minio
    networks:
      - pydantic-ai-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  pydantic-ai-createbuckets:
    image: minio/mc
    depends_on:
      - pydantic-ai-minio
    networks:
      - pydantic-ai-network
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc alias set myminio http://pydantic-ai-minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin} &&
      mc mb --ignore-existing myminio/${MINIO_BUCKET_NAME:-chat-files} &&
      mc policy set public myminio/${MINIO_BUCKET_NAME:-chat-files}
      "

  pydantic-ai-redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - pydantic-ai-redis-data:/data
    networks:
      - pydantic-ai-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

networks:
  pydantic-ai-network:
    driver: bridge

volumes:
  pydantic-ai-postgres-data:
    driver: local
  pydantic-ai-minio-data:
    driver: local
  pydantic-ai-redis-data:
    driver: local
